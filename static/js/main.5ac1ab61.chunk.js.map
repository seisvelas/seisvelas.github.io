{"version":3,"sources":["logo.svg","BlogEntry.js","Blog.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","width","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","BlogEntry","gist","classes","useState","isClicked","setClicked","ExpansionPanel","ExpansionPanelSummary","aria-controls","onClick","expandIcon","Typography","className","description","ExpansionPanelDetails","user","id","Divider","Blog","props","posts","setPosts","useEffect","console","log","axios","get","then","response","data","filter","e","Object","keys","files","some","f","includes","map","i","key","createdAt","created_at","split","card","maxWidth","marginBottom","flexGrow","App","React","content","setContent","Fragment","CssBaseline","Container","style","marginTop","padding","backgroundColor","component","Grid","container","justify","Card","CardActionArea","CardMedia","alt","height","image","title","CardContent","variant","Paper","Tabs","value","onChange","v","indicatorColor","textColor","centered","Tab","label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5ac1ab61.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\nimport ReactEmbedGist from 'react-embed-gist';\nimport Divider from '@material-ui/core/Divider';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n      width: '100%',\n    },\n    heading: {\n      fontSize: theme.typography.pxToRem(15),\n      fontWeight: theme.typography.fontWeightRegular,\n    },\n  }));\n\nfunction BlogEntry(gist)  {\n    const classes = useStyles();\n    const [isClicked, setClicked] = useState(false);\n\n    return (\n        <div>\n            <ExpansionPanel>\n                <ExpansionPanelSummary aria-controls=\"panel1a-content\" onClick={() => setClicked(!isClicked)} expandIcon={<ExpandMoreIcon />}>\n                    <Typography className={classes.heading}>{(!isClicked) ? gist.description : \"\"}</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                    <Typography>\n                        <ReactEmbedGist gist={`${gist.user}/${gist.id}`} />\n                    </Typography>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n            <Divider />\n        </div>\n    );\n}\n\n  export default BlogEntry","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport BlogEntry from './BlogEntry.js'\n\nfunction Blog(props)  {\n    let [posts, setPosts] = useState([]);\n\n    useEffect(() => {\n        console.log(props.user)\n        axios.get(`https://api.github.com/users/${props.user}/gists?page=1&per_page=100`)\n        .then(function (response) {\n            setPosts(response.data.filter(e=>{\n                \n                return Object.keys(e.files).some(f=>f.includes(\"blog_\"))\n            }))\n        });\n    }, []) \n    \n    console.log(posts)\n    return (\n        \n        <div>\n            {posts.map((e, i)=> <BlogEntry key={i} user={props.user} description={e.description} id={e.id} createdAt={e.created_at.split(\"T\")[0]} />)}\n        </div>\n    );\n  }\n\n  export default Blog","import React from 'react';\nimport Blog from './Blog.js'\nimport logo from './logo.svg'; // I should prolly find a new favicon lol\nimport './App.css';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Container';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Divider from '@material-ui/core/Divider';\nimport ReactEmbedGist from 'react-embed-gist';\n\nconst useStyles = makeStyles({\n  card: {\n    maxWidth: \"35%\",\n    marginBottom: \"10px\"\n  },\n  root: {\n    flexGrow: 1,\n  }\n});\n\nfunction App() {\n  const classes = useStyles();\n  const [content, setContent] = React.useState(0);\n  \n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth=\"md\" style={{marginTop: \"1%\", padding: \"1%\", backgroundColor: \"rgba(12, 14, 16, 0.84)\"}}>\n        <Typography component=\"div\">\n        <Grid container justify=\"center\">\n<Card className={classes.card}>\n      <CardActionArea>\n        <CardMedia\n          component=\"img\"\n          alt=\"Moi (dramatiqe)\"\n          height=\"40%\"\n          image=\"https://i.imgur.com/OH2mv8o.jpg\"\n          title=\"Photographie d'moi in nigre\"\n        />\n        <CardContent>\n          <Typography variant=\"h5\" component=\"h1\">\n            Xandre V\n          </Typography>\n          <Typography variant=\"subtitle1\">\n            <b>i break stuff.</b><p />\n            [then i fix it :3]<p />\n            i unravel bugs in web apps<p />\n            like a free diver plunges into the abyss for oysters.\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n    </Card>\n    <Container maxWidth=\"20%\">\n    </Container>\n    </Grid>\n    <Paper style={{marginTop: \"5%\"}} className={classes.root}>\n      <Tabs\n        value={content}\n        onChange={(e, v)=>{setContent(v)}}\n        indicatorColor=\"primary\"\n        textColor=\"primary\"\n        centered\n      >\n        <Tab label=\"Writing\" />\n        <Tab label=\"Who?\" />\n      </Tabs>\n    </Paper>\n    <Divider />\n\n          {(content === 0) ? (<Blog user='seisvelas' />)\n           : (<div><ReactEmbedGist gist={`seisvelas/64899130591e38ec795593484fd94c6c`} /></div>)\n          }\n\n        </Typography>\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}